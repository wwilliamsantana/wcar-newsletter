
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Subscriber` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Subscriber
 * 
 */
export type SubscriberModel = runtime.Types.Result.DefaultSelection<Prisma.$SubscriberPayload>

export type AggregateSubscriber = {
  _count: SubscriberCountAggregateOutputType | null
  _avg: SubscriberAvgAggregateOutputType | null
  _sum: SubscriberSumAggregateOutputType | null
  _min: SubscriberMinAggregateOutputType | null
  _max: SubscriberMaxAggregateOutputType | null
}

export type SubscriberAvgAggregateOutputType = {
  id: number | null
}

export type SubscriberSumAggregateOutputType = {
  id: number | null
}

export type SubscriberMinAggregateOutputType = {
  id: number | null
  email: string | null
  isSubscribe: boolean | null
  createdAt: Date | null
}

export type SubscriberMaxAggregateOutputType = {
  id: number | null
  email: string | null
  isSubscribe: boolean | null
  createdAt: Date | null
}

export type SubscriberCountAggregateOutputType = {
  id: number
  email: number
  isSubscribe: number
  createdAt: number
  _all: number
}


export type SubscriberAvgAggregateInputType = {
  id?: true
}

export type SubscriberSumAggregateInputType = {
  id?: true
}

export type SubscriberMinAggregateInputType = {
  id?: true
  email?: true
  isSubscribe?: true
  createdAt?: true
}

export type SubscriberMaxAggregateInputType = {
  id?: true
  email?: true
  isSubscribe?: true
  createdAt?: true
}

export type SubscriberCountAggregateInputType = {
  id?: true
  email?: true
  isSubscribe?: true
  createdAt?: true
  _all?: true
}

export type SubscriberAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Subscriber to aggregate.
   */
  where?: Prisma.SubscriberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Subscribers to fetch.
   */
  orderBy?: Prisma.SubscriberOrderByWithRelationInput | Prisma.SubscriberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SubscriberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Subscribers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Subscribers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Subscribers
  **/
  _count?: true | SubscriberCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SubscriberAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SubscriberSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SubscriberMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SubscriberMaxAggregateInputType
}

export type GetSubscriberAggregateType<T extends SubscriberAggregateArgs> = {
      [P in keyof T & keyof AggregateSubscriber]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSubscriber[P]>
    : Prisma.GetScalarType<T[P], AggregateSubscriber[P]>
}




export type SubscriberGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SubscriberWhereInput
  orderBy?: Prisma.SubscriberOrderByWithAggregationInput | Prisma.SubscriberOrderByWithAggregationInput[]
  by: Prisma.SubscriberScalarFieldEnum[] | Prisma.SubscriberScalarFieldEnum
  having?: Prisma.SubscriberScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SubscriberCountAggregateInputType | true
  _avg?: SubscriberAvgAggregateInputType
  _sum?: SubscriberSumAggregateInputType
  _min?: SubscriberMinAggregateInputType
  _max?: SubscriberMaxAggregateInputType
}

export type SubscriberGroupByOutputType = {
  id: number
  email: string
  isSubscribe: boolean
  createdAt: Date
  _count: SubscriberCountAggregateOutputType | null
  _avg: SubscriberAvgAggregateOutputType | null
  _sum: SubscriberSumAggregateOutputType | null
  _min: SubscriberMinAggregateOutputType | null
  _max: SubscriberMaxAggregateOutputType | null
}

type GetSubscriberGroupByPayload<T extends SubscriberGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SubscriberGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SubscriberGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SubscriberGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SubscriberGroupByOutputType[P]>
      }
    >
  >



export type SubscriberWhereInput = {
  AND?: Prisma.SubscriberWhereInput | Prisma.SubscriberWhereInput[]
  OR?: Prisma.SubscriberWhereInput[]
  NOT?: Prisma.SubscriberWhereInput | Prisma.SubscriberWhereInput[]
  id?: Prisma.IntFilter<"Subscriber"> | number
  email?: Prisma.StringFilter<"Subscriber"> | string
  isSubscribe?: Prisma.BoolFilter<"Subscriber"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Subscriber"> | Date | string
}

export type SubscriberOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  isSubscribe?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SubscriberWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  email?: string
  AND?: Prisma.SubscriberWhereInput | Prisma.SubscriberWhereInput[]
  OR?: Prisma.SubscriberWhereInput[]
  NOT?: Prisma.SubscriberWhereInput | Prisma.SubscriberWhereInput[]
  isSubscribe?: Prisma.BoolFilter<"Subscriber"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Subscriber"> | Date | string
}, "id" | "email">

export type SubscriberOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  isSubscribe?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.SubscriberCountOrderByAggregateInput
  _avg?: Prisma.SubscriberAvgOrderByAggregateInput
  _max?: Prisma.SubscriberMaxOrderByAggregateInput
  _min?: Prisma.SubscriberMinOrderByAggregateInput
  _sum?: Prisma.SubscriberSumOrderByAggregateInput
}

export type SubscriberScalarWhereWithAggregatesInput = {
  AND?: Prisma.SubscriberScalarWhereWithAggregatesInput | Prisma.SubscriberScalarWhereWithAggregatesInput[]
  OR?: Prisma.SubscriberScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SubscriberScalarWhereWithAggregatesInput | Prisma.SubscriberScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Subscriber"> | number
  email?: Prisma.StringWithAggregatesFilter<"Subscriber"> | string
  isSubscribe?: Prisma.BoolWithAggregatesFilter<"Subscriber"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Subscriber"> | Date | string
}

export type SubscriberCreateInput = {
  email: string
  isSubscribe?: boolean
  createdAt?: Date | string
}

export type SubscriberUncheckedCreateInput = {
  id?: number
  email: string
  isSubscribe?: boolean
  createdAt?: Date | string
}

export type SubscriberUpdateInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  isSubscribe?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SubscriberUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  isSubscribe?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SubscriberCreateManyInput = {
  id?: number
  email: string
  isSubscribe?: boolean
  createdAt?: Date | string
}

export type SubscriberUpdateManyMutationInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  isSubscribe?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SubscriberUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  isSubscribe?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SubscriberCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  isSubscribe?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SubscriberAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type SubscriberMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  isSubscribe?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SubscriberMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  isSubscribe?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SubscriberSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type SubscriberSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  isSubscribe?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["subscriber"]>

export type SubscriberSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  isSubscribe?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["subscriber"]>

export type SubscriberSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  isSubscribe?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["subscriber"]>

export type SubscriberSelectScalar = {
  id?: boolean
  email?: boolean
  isSubscribe?: boolean
  createdAt?: boolean
}

export type SubscriberOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "email" | "isSubscribe" | "createdAt", ExtArgs["result"]["subscriber"]>

export type $SubscriberPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Subscriber"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    email: string
    isSubscribe: boolean
    createdAt: Date
  }, ExtArgs["result"]["subscriber"]>
  composites: {}
}

export type SubscriberGetPayload<S extends boolean | null | undefined | SubscriberDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SubscriberPayload, S>

export type SubscriberCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SubscriberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SubscriberCountAggregateInputType | true
  }

export interface SubscriberDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscriber'], meta: { name: 'Subscriber' } }
  /**
   * Find zero or one Subscriber that matches the filter.
   * @param {SubscriberFindUniqueArgs} args - Arguments to find a Subscriber
   * @example
   * // Get one Subscriber
   * const subscriber = await prisma.subscriber.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SubscriberFindUniqueArgs>(args: Prisma.SelectSubset<T, SubscriberFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SubscriberClient<runtime.Types.Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Subscriber that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SubscriberFindUniqueOrThrowArgs} args - Arguments to find a Subscriber
   * @example
   * // Get one Subscriber
   * const subscriber = await prisma.subscriber.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SubscriberFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SubscriberFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SubscriberClient<runtime.Types.Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Subscriber that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriberFindFirstArgs} args - Arguments to find a Subscriber
   * @example
   * // Get one Subscriber
   * const subscriber = await prisma.subscriber.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SubscriberFindFirstArgs>(args?: Prisma.SelectSubset<T, SubscriberFindFirstArgs<ExtArgs>>): Prisma.Prisma__SubscriberClient<runtime.Types.Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Subscriber that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriberFindFirstOrThrowArgs} args - Arguments to find a Subscriber
   * @example
   * // Get one Subscriber
   * const subscriber = await prisma.subscriber.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SubscriberFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SubscriberFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SubscriberClient<runtime.Types.Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Subscribers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriberFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Subscribers
   * const subscribers = await prisma.subscriber.findMany()
   * 
   * // Get first 10 Subscribers
   * const subscribers = await prisma.subscriber.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const subscriberWithIdOnly = await prisma.subscriber.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SubscriberFindManyArgs>(args?: Prisma.SelectSubset<T, SubscriberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Subscriber.
   * @param {SubscriberCreateArgs} args - Arguments to create a Subscriber.
   * @example
   * // Create one Subscriber
   * const Subscriber = await prisma.subscriber.create({
   *   data: {
   *     // ... data to create a Subscriber
   *   }
   * })
   * 
   */
  create<T extends SubscriberCreateArgs>(args: Prisma.SelectSubset<T, SubscriberCreateArgs<ExtArgs>>): Prisma.Prisma__SubscriberClient<runtime.Types.Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Subscribers.
   * @param {SubscriberCreateManyArgs} args - Arguments to create many Subscribers.
   * @example
   * // Create many Subscribers
   * const subscriber = await prisma.subscriber.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SubscriberCreateManyArgs>(args?: Prisma.SelectSubset<T, SubscriberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Subscribers and returns the data saved in the database.
   * @param {SubscriberCreateManyAndReturnArgs} args - Arguments to create many Subscribers.
   * @example
   * // Create many Subscribers
   * const subscriber = await prisma.subscriber.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Subscribers and only return the `id`
   * const subscriberWithIdOnly = await prisma.subscriber.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SubscriberCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SubscriberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Subscriber.
   * @param {SubscriberDeleteArgs} args - Arguments to delete one Subscriber.
   * @example
   * // Delete one Subscriber
   * const Subscriber = await prisma.subscriber.delete({
   *   where: {
   *     // ... filter to delete one Subscriber
   *   }
   * })
   * 
   */
  delete<T extends SubscriberDeleteArgs>(args: Prisma.SelectSubset<T, SubscriberDeleteArgs<ExtArgs>>): Prisma.Prisma__SubscriberClient<runtime.Types.Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Subscriber.
   * @param {SubscriberUpdateArgs} args - Arguments to update one Subscriber.
   * @example
   * // Update one Subscriber
   * const subscriber = await prisma.subscriber.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SubscriberUpdateArgs>(args: Prisma.SelectSubset<T, SubscriberUpdateArgs<ExtArgs>>): Prisma.Prisma__SubscriberClient<runtime.Types.Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Subscribers.
   * @param {SubscriberDeleteManyArgs} args - Arguments to filter Subscribers to delete.
   * @example
   * // Delete a few Subscribers
   * const { count } = await prisma.subscriber.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SubscriberDeleteManyArgs>(args?: Prisma.SelectSubset<T, SubscriberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Subscribers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriberUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Subscribers
   * const subscriber = await prisma.subscriber.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SubscriberUpdateManyArgs>(args: Prisma.SelectSubset<T, SubscriberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Subscribers and returns the data updated in the database.
   * @param {SubscriberUpdateManyAndReturnArgs} args - Arguments to update many Subscribers.
   * @example
   * // Update many Subscribers
   * const subscriber = await prisma.subscriber.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Subscribers and only return the `id`
   * const subscriberWithIdOnly = await prisma.subscriber.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SubscriberUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SubscriberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Subscriber.
   * @param {SubscriberUpsertArgs} args - Arguments to update or create a Subscriber.
   * @example
   * // Update or create a Subscriber
   * const subscriber = await prisma.subscriber.upsert({
   *   create: {
   *     // ... data to create a Subscriber
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Subscriber we want to update
   *   }
   * })
   */
  upsert<T extends SubscriberUpsertArgs>(args: Prisma.SelectSubset<T, SubscriberUpsertArgs<ExtArgs>>): Prisma.Prisma__SubscriberClient<runtime.Types.Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Subscribers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriberCountArgs} args - Arguments to filter Subscribers to count.
   * @example
   * // Count the number of Subscribers
   * const count = await prisma.subscriber.count({
   *   where: {
   *     // ... the filter for the Subscribers we want to count
   *   }
   * })
  **/
  count<T extends SubscriberCountArgs>(
    args?: Prisma.Subset<T, SubscriberCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SubscriberCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Subscriber.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SubscriberAggregateArgs>(args: Prisma.Subset<T, SubscriberAggregateArgs>): Prisma.PrismaPromise<GetSubscriberAggregateType<T>>

  /**
   * Group by Subscriber.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriberGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SubscriberGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SubscriberGroupByArgs['orderBy'] }
      : { orderBy?: SubscriberGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SubscriberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Subscriber model
 */
readonly fields: SubscriberFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Subscriber.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SubscriberClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Subscriber model
 */
export interface SubscriberFieldRefs {
  readonly id: Prisma.FieldRef<"Subscriber", 'Int'>
  readonly email: Prisma.FieldRef<"Subscriber", 'String'>
  readonly isSubscribe: Prisma.FieldRef<"Subscriber", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Subscriber", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Subscriber findUnique
 */
export type SubscriberFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null
  /**
   * Filter, which Subscriber to fetch.
   */
  where: Prisma.SubscriberWhereUniqueInput
}

/**
 * Subscriber findUniqueOrThrow
 */
export type SubscriberFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null
  /**
   * Filter, which Subscriber to fetch.
   */
  where: Prisma.SubscriberWhereUniqueInput
}

/**
 * Subscriber findFirst
 */
export type SubscriberFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null
  /**
   * Filter, which Subscriber to fetch.
   */
  where?: Prisma.SubscriberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Subscribers to fetch.
   */
  orderBy?: Prisma.SubscriberOrderByWithRelationInput | Prisma.SubscriberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Subscribers.
   */
  cursor?: Prisma.SubscriberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Subscribers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Subscribers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Subscribers.
   */
  distinct?: Prisma.SubscriberScalarFieldEnum | Prisma.SubscriberScalarFieldEnum[]
}

/**
 * Subscriber findFirstOrThrow
 */
export type SubscriberFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null
  /**
   * Filter, which Subscriber to fetch.
   */
  where?: Prisma.SubscriberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Subscribers to fetch.
   */
  orderBy?: Prisma.SubscriberOrderByWithRelationInput | Prisma.SubscriberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Subscribers.
   */
  cursor?: Prisma.SubscriberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Subscribers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Subscribers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Subscribers.
   */
  distinct?: Prisma.SubscriberScalarFieldEnum | Prisma.SubscriberScalarFieldEnum[]
}

/**
 * Subscriber findMany
 */
export type SubscriberFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null
  /**
   * Filter, which Subscribers to fetch.
   */
  where?: Prisma.SubscriberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Subscribers to fetch.
   */
  orderBy?: Prisma.SubscriberOrderByWithRelationInput | Prisma.SubscriberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Subscribers.
   */
  cursor?: Prisma.SubscriberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Subscribers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Subscribers.
   */
  skip?: number
  distinct?: Prisma.SubscriberScalarFieldEnum | Prisma.SubscriberScalarFieldEnum[]
}

/**
 * Subscriber create
 */
export type SubscriberCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null
  /**
   * The data needed to create a Subscriber.
   */
  data: Prisma.XOR<Prisma.SubscriberCreateInput, Prisma.SubscriberUncheckedCreateInput>
}

/**
 * Subscriber createMany
 */
export type SubscriberCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Subscribers.
   */
  data: Prisma.SubscriberCreateManyInput | Prisma.SubscriberCreateManyInput[]
}

/**
 * Subscriber createManyAndReturn
 */
export type SubscriberCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null
  /**
   * The data used to create many Subscribers.
   */
  data: Prisma.SubscriberCreateManyInput | Prisma.SubscriberCreateManyInput[]
}

/**
 * Subscriber update
 */
export type SubscriberUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null
  /**
   * The data needed to update a Subscriber.
   */
  data: Prisma.XOR<Prisma.SubscriberUpdateInput, Prisma.SubscriberUncheckedUpdateInput>
  /**
   * Choose, which Subscriber to update.
   */
  where: Prisma.SubscriberWhereUniqueInput
}

/**
 * Subscriber updateMany
 */
export type SubscriberUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Subscribers.
   */
  data: Prisma.XOR<Prisma.SubscriberUpdateManyMutationInput, Prisma.SubscriberUncheckedUpdateManyInput>
  /**
   * Filter which Subscribers to update
   */
  where?: Prisma.SubscriberWhereInput
  /**
   * Limit how many Subscribers to update.
   */
  limit?: number
}

/**
 * Subscriber updateManyAndReturn
 */
export type SubscriberUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null
  /**
   * The data used to update Subscribers.
   */
  data: Prisma.XOR<Prisma.SubscriberUpdateManyMutationInput, Prisma.SubscriberUncheckedUpdateManyInput>
  /**
   * Filter which Subscribers to update
   */
  where?: Prisma.SubscriberWhereInput
  /**
   * Limit how many Subscribers to update.
   */
  limit?: number
}

/**
 * Subscriber upsert
 */
export type SubscriberUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null
  /**
   * The filter to search for the Subscriber to update in case it exists.
   */
  where: Prisma.SubscriberWhereUniqueInput
  /**
   * In case the Subscriber found by the `where` argument doesn't exist, create a new Subscriber with this data.
   */
  create: Prisma.XOR<Prisma.SubscriberCreateInput, Prisma.SubscriberUncheckedCreateInput>
  /**
   * In case the Subscriber was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SubscriberUpdateInput, Prisma.SubscriberUncheckedUpdateInput>
}

/**
 * Subscriber delete
 */
export type SubscriberDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null
  /**
   * Filter which Subscriber to delete.
   */
  where: Prisma.SubscriberWhereUniqueInput
}

/**
 * Subscriber deleteMany
 */
export type SubscriberDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Subscribers to delete
   */
  where?: Prisma.SubscriberWhereInput
  /**
   * Limit how many Subscribers to delete.
   */
  limit?: number
}

/**
 * Subscriber without action
 */
export type SubscriberDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null
}
